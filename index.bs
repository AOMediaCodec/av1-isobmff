<pre class='metadata'>
Title: AV1 Codec ISO Media File Format Binding
Status: LS
URL: https://AOMediaCodec.github.io/av1-isobmff
Shortname: av1-isobmff
Editor: Cyril Concolato, Netflix, cconcolato@netflix.com
Editor: Tom Finegan, Google, tom.finegan@google.com
Abstract: This document specifies the storage format for [[!AV1]] video in [[!ISOBMFF]] tracks as well as a set of [[!CMAF]] Media profiles based on [[!AV1]].
Date: 2018-03-19
Repository: AOMediaCodec/av1-isobmff
Inline Github Issues: full
Boilerplate: property-index no, issues-index no, copyright no
Markup Shorthands: css on
Group: AOM
Warning: Custom
Custom Warning Title: Warning
Custom Warning Text: This specification is still at draft stage and should not be referenced other than as a working draft.
</pre>

<pre class="anchors">
url: http://iso.org; spec: ISOBMFF; type: dfn;
	text: VisualSampleEntry

url: http://iso.org; spec: ISOBMFF; type: property;
	text: colr
	text: pasp
	text: stsd
	text: bitr
	text: ctts
	text: sgpd

url: http://iso.org; spec: RFC6381; type: property;
	text: codecs

url: AOMediaCodec/av1-spec; spec: AV1; type: dfn;
	text: AV1 bitstream
	text: OBU
	text: Key Frame
	text: Intra-only Frame
	text: S Frame
	text: Inter Frame
	text: Temporal Unit
	text: Frame Header
	text: Sequence Header

url: http://iso.org; spec: CMAF; type: dfn;
	text: CMAF Video Track

url: http://iso.org; spec: CENC; type: property;
	text: cbcs
	text: cenc

url: AOMediaCodec/av1-spec; spec: AV1; type: property;
	text: max_frame_width_minus_1
	text: max_frame_height_minus_1
	text: obu_has_payload_length_field
	text: show_frame
	text: initial_display_delay_minus1
	text: frame_presentation_delay
	text: timing_info
	text: buffer_removal_delay
</pre>

Bitstream features overview {#bitstream-overview}
=================================================
An [=AV1 bitstream=] is composed of a sequence of [=OBU=]s, grouped into [=Temporal Unit=]s.

OBUs are made of a 1 or 2 bytes header, identifying in particular the type of OBU, followed by an optional length field and by an optional payload whose presence and content depend on the OBU type. Depending on its type, an OBU can carry configuration information, metadata or coded video data.

Temporal Units are processed by a decoder in the order given by the bitstream. Each Temporal Unit is associated with a presentation time. Some Temporal Units may contain multiple frames to be decoded but only one is presented (when scalability is not used).

NOTE: The AV1 specification defines scalability features, but this version of storage in ISOBMFF does not specify specific tools for scalability. A future version of the specification may do so.

Frames carried in Temporal Units may have coding dependencies on frames carried previously in the same Temporal Unit or in previous Temporal Units. Frames that can be decoded without dependencies to previous frames are of two categories: [=Key Frames=] and [=Intra-only Frames=]. Frames that cannot be decoded independently are of three categories: [=Inter Frames=], [=S Frames=] and frames with a show_existing_frame flag set to 1. Key Frames with the show_frame flag set to 1, S Frames and frames with a show_existing_frame flag set to 1 and refering to a previous Key Frame have the additional property that after decoding the Key Frame (respectively the S Frame, respectively the referenced Key Frame), all frames can be decoded.

Basic Encapsulation Scheme {#basic-encapsulation}
=================================================

This section describes the basic data structures used to signal encapsulation of [=AV1 bitstreams=] in [[!ISOBMFF]] containers.

Brand {#basic-brand}
--------------------

Tracks conformant to this specification should signal it by the use of the file brand 'av01'.

AV1 Sample Entry {#av1sampleentry-section}
----------------------------------

### Definition ### {#av1sampleentry-definition}

<pre class='elementdef'>
	Sample Entry Type: av01
	Container: Sample Description Box ('stsd')
	Mandatory: Yes
	Quantity: One or more.
</pre>

### Description ### {#av1sampleentry-description}

The <dfn>AV1SampleEntry</dfn> sample entry identifies that the track contains [=AV1 Samples=], and uses an [=AV1CodecConfigurationBox=].

### Syntax ### {#av1sampleentry-syntax}

```
class AV1SampleEntry extends VisualSampleEntry('av01') {
  AV1CodecConfigurationBox config;
}
```

### Semantics ### {#av1sampleentry-semantics}

The <dfn>width</dfn> and <dfn>height</dfn> fields of the [=VisualSampleEntry=] SHALL equal the values of [=max_frame_width_minus_1=] + 1 and [=max_frame_height_minus_1=] + 1 of the [=Sequence Header=] applying to the samples associated with this sample entry.

As specified in [[!ISOBMFF]], the width and height in the [=VisualSampleEntry=] are specified in square pixels. If the video pixels are not square, then a 'pasp' box MUST be included and the track header width and height SHOULD match the values of [=max_frame_width_minus_1=] + 1 and [=max_frame_height_minus_1=] + 1 after the 'pasp' ratio has been applied.

The <dfn>compressorname</dfn> field of the [=VisualSampleEntry=] is an informative name. It is formatted in a fixed 32-byte field, with the first byte set to the number of bytes to be displayed, followed by that number of bytes of displayable data, followed by padding to complete 32 bytes total (including the size byte). The size field MAY be set to 0. The value "\012AOM Coding" is RECOMMENDED; the first byte is a count of the remaining bytes, here represented by \012, which (being octal 12) is decimal 10, the number of bytes in the rest of the string.

NOTE: Parsers may ignore the value of the compressorname field. It is specified in this document simply for legacy and backwards compatibility reasons.

The <dfn>config</dfn> field SHALL contain an [=AV1CodecConfigurationBox=] that applies to the samples associated with this sample entry.

NOTE: Multiple instances of [=AV1SampleEntry=] may be required when the track contains samples requiring a AV1ConfigurationBox with different characteristics.

Optional boxes not specifically mentioned here can be present, in particular those indicated in the definition of the [=VisualSampleEntry=] in [[ISOBMFF]].

AV1 Codec Configuration Box {#av1codecconfigurationbox-section}
--------------------------------------------------------

### Definition ### {#av1codecconfigurationbox-definition}

<pre class='elementdef'>
	Box Type: av1C
	Container: AV1 Codec Sample Entry Box ('av01')
	Mandatory: Yes
	Quantity: Exactly One
</pre>


### Description ### {#av1codecconfigurationbox-description}

The <dfn>AV1CodecConfigurationBox</dfn> contains an array of [=OBUs=] that MUST be valid for every sample that references the sample entry.


### Syntax ### {#av1codecconfigurationbox-syntax}

```
class AV1CodecConfigurationBox extends FullBox('av1C', version = 0, 0){
  AV1CodecConfigurationRecord() av1Config;
}

aligned (8) class AV1CodecConfigurationRecord {
  unsigned int (6) reserved = 0;
  unsigned int (2) OBU_length_mode;
  unsigned int (3) initial_presentation_delay_minus_one;
  unsigned int (8)[] configOBUs;
}
```

### Semantics ### {#av1codecconfigurationbox-semantics}

The <dfn>configOBUs</dfn> field contains zero or more OBUs applicable to all the samples corresponding to the sample description entry. Multiple OBUs of the same type may be present only if they differ by their [=temporal_id=] or [=spatial_id=] value. The following OBU types are not permitted: OBU_TD, OBU_FRAME_HEADER, OBU_REDUNDANT_FRAME_HEADER, OBU_TILE_GROUP, OBU_FRAME.

NOTE: The configOBUs field is expected to contain only OBU_SEQUENCE_HEADER and OBU_METADATA when the metadata is applicable to all the associated samples.

The <dfn>OBU_length_mode</dfn> field indicates if the length of the OBUs (in the sample entry or in the samples) is:
- 0: present for all OBUs, before the OBU header, and the [=obu_has_payload_length_field=] flag is set to 0,
- 1: present for all OBUs, after the OBU header, and the [=obu_has_payload_length_field=] flag set to 1,
- 2: same as 1 except for the last OBU where the length is not present and the [=obu_has_payload_length_field=] flag is set to 0.
- 3: The value 3 for OBU_length_mode is not allowed.

In all cases, if present, the length is coded using LEB128 as specified in [[!AV1]].

ISSUE: This field could disappear if we decide to mandate only one mode.

The <dfn>initial_presentation_delay_minus_one</dfn> field indicates the number of samples (minus one) that should be decoded prior to starting the presentation of the first sample associated with this sample entry in order to guarantee that each sample will be decoded prior to its presentation time under the constraints of the first level value indicated in the [=Sequence Header=] (in the configOBUs field or in the associated samples). More precisely, the following procedure SHALL not return any error:
- construct a hypothetical bitstream consisting of the OBUs carried in the sample entry followed by the OBUs carried in all the samples,
- set the first [=initial_display_delay_minus1=] field of each sequence header to the number of frames contained in the first [=initial_presentation_delay_minus_one=] + 1 samples,
- set the [=frame_presentation_delay=] field of the frame header of each presentable frame such that it matches the presentation time difference between the sample carrying this frame and the previous sample (if it exists, 0 otherwise)
- apply the display model verification algorithm.
In particular, when smooth presentation can be guaranteed after decoding the first sample, the value 0 SHALL be used; and if an ISOBMFF writer cannot verify the above procedure, it should set [=initial_presentation_delay=] to its maximum value.

The presentation times of AV1 samples are given by the ISOBMFF structures. The [=timing_info_present_flag=] in the [=Sequence Header=] (in the configOBUs field or in the associated samples) SHOULD be set to 0. If set to 1, the [=timing_info=] structure of the [=Sequence Header=], the [=frame_presentation_delay=] and [=buffer_removal_delay=] fields of the [=Frame Headers=], if present, SHALL be ignored for the purpose of timed processing of the ISOBMFF file.

If a 'colr' box is present in the [=VisualSampleEntry=] with a colour_type set to 'nclx', the values of colour_primaries, transfer_characteristics, and matrix_coefficients shall match the values given in the [=Sequence Header=] (in the configOBUs field or in the associated samples) if the color_description_present_flag is set to 1. Similarly, the full_range_flag in the 'colr' box shall match the color_range flag in the [=Sequence Header=].

Additional boxes may be provided at the end of the [=VisualSampleEntry=] as permitted by ISOBMFF, that may represent redundant or similar information to the one provided in some OBUs contained in the [=AV1CodecConfigurationRecord=]. If the box definition does not indicate that its information overrides the OBU information, in case of conflict, the OBU information should be considered authoritative.

AV1 Sample Format {#sampleformat}
---------------------------------

For tracks using the [=AV1SampleEntry=], an <dfn>AV1 Sample</dfn> has the following constraints:
- the sample SHALL contain a sequence of [=OBU=]s forming a [=Temporal Unit=],
- each OBU SHALL have the [=obu_has_payload_length_field=] set to 1 except for the last one, the last OBU size is obtained from the sample size,
- each OBU SHALL have its length coded as signaled by the OBU_length_mode field,

ISSUE: We need to choose one of the two options above.

- OBU trailing bits SHOULD be limited to byte alignment and SHOULD not be used for padding,
- OBUs of type OBU_TD, OBU_PADDING or OBU_REDUNDANT_FRAME_HEADER SHOULD NOT be used.

If an AV1 Sample is signaled as a sync sample, it SHALL satisfy the following constraints:
- Its first frame is a [=Key Frame=] that has either show_frame flag set to 1 or refresh_frame_flags set to 0xFF or an [=Intra-only Frame=] that has refresh_frame_flags set to 0xFF,
- It contain a [=Sequence Header=] before the first [=Frame Header=].

NOTE: Within this definition, a sync sample may contain additional frames that are not Key Frames. The fact that none of them is the first frame in the temporal unit ensures that they are decodable. Additionally, there is no requirement for the first frame to have its 'show_frame' flag set. Subsequent frames may have it.

ISSUE: A new sample group may be needed for signaling show_existing_frames referring to a keyframe.

NOTE: Other types of OBUs such as metadata could be present before the [=Sequence Header=].

[=Intra-only frames=] MAY be signaled using the 'sap ' sample group.

S-Frames SHOULD be signaled using sample groups and the [=AV1SFrameSampleGroupEntry=].

Additionally, if a file contains multiple tracks which are alternative representations of the same content, in particular using S-Frames, those tracks should be marked as belonging to the same alternate group and should use a track selection box with an appropriate attribute (e.g. 'bitr').

Unlike many video standards, AV1 does not distinguish the display order from the decoding order, but achieves similar effects by grouping multiple frames within a sample. Therefore, composition offsets are not used. In files conformant to this specification, the 'ctts' box and composition offsets in movie fragments SHALL NOT be used for AV1 tracks. Similarly, the is_leading flag, if used, shall be set to 0 or 2.

When a temporal unit contains more than one frame, the sample corresponding to that temporal unit should be marked using the [=AV1MultiFrameSampleGroupEntry=].

The grouping_type_parameter is not defined for the SampleToGroupBox with grouping types defined in this specification (i.e. 'av1m', 'av1s', 'av1M').

AV1 Multi-Frame sample group entry {#multiframesamplegroupentry}
----------------------------------------------------------------

### Definition ### {#multiframesamplegroupentry-definition}

<pre class='elementdef'>
	Group Type: av1m
	Container: Sample Group Description Box ('sgpd')
	Mandatory: No
	Quantity: Zero or more.
</pre>


### Description ### {#multiframesamplegroupentry-description}

The <dfn>AV1MultiFrameSampleGroupEntry</dfn> documents samples that contain multiple frames.


### Syntax ### {#multiframesamplegroupentry-syntax}

```
class AV1MultiFrameSampleGroupEntry extends VisualSampleGroupEntry('av1m') {
}
```

AV1 S-Frame sample group entry {#sframeamplegroupentry}
-------------------------------------------------------

### Definition ### {#sframeamplegroupentry-definition}

<pre class='elementdef'>
	Group Type: av1s
	Container: Sample Group Description Box ('sgpd')
	Mandatory: No
	Quantity: Zero or more.
</pre>


### Description ### {#sframeamplegroupentry-description}

The <dfn>AV1SFrameSampleGroupEntry</dfn> documents samples that start with an S-Frame.

### Syntax ### {#sframeamplegroupentry-syntax}

```
class AV1SFrameSampleGroupEntry extends VisualSampleGroupEntry('av1s') {
}
```

ISSUE: we could define subsample information for identifying OBUs within a sample, of frames offsets within a sample, or tiles ...

Carriage of HDR Metadata {#hdrmetadata}
---------------------------------------

HDR metadata may be provided using the METADATA OBU type, with a metadata_type value equal to METADATA_TYPE_HDR_CLL and METADATA_TYPE_HDR_MDCV. These OBUs may be carried in sample data, but if they are static for the entire set of samples associated with a given sample description entry, they should also be in the OBU array in the sample description entry. When carried in sample, the [=AV1MetadataSampleGroupEntry=] should be used.

AV1 Metadata sample group entry {#metadatasamplegroupentry}
-----------------------------------------------------------

### Definition ### {#metadatasamplegroupentry-definition}

<pre class='elementdef'>
	Group Type: av1M
	Container: Sample Group Description Box ('sgpd')
	Mandatory: No
	Quantity: Zero or more.
</pre>


### Description ### {#metadatasamplegroupentry-description}

The <dfn>AV1MetadataSampleGroupEntry</dfn> documents samples that contain metadata OBUs.

### Syntax ### {#metadatasamplegroupentry-syntax}

```
class AV1MetadataSampleGroupEntry extends VisualSampleGroupEntry('av1M') {
  unsigned int (16) metadata_type;
}
```

### Semantics ### {#metadatasamplegroupentry-semantics}

<dfn>metadata_type</dfn> is as specified in the AV1 specification.

CMAF AV1 track format and CMAF media profiles {#cmaf}
=====================================================

[[CMAF]] defines structural constraints on ISOBMFF files additional to [[ISOBMFF]] for the purpose of, for example, adaptive streaming or for encrypted files. [[CMAF]] also relies on the signaling of CMAF Media Profiles. This document specifies CMAF Media Profiles and associated brands for AV1 bitstreams in CMAF-compliant files.

If a [=CMAF Video Track=] signals one of the brands defined below, it is called a <dfn>CMAF AV1 Track</dfn> and the following constraints apply:
- it SHALL use an [=AV1SampleEntry=]
- it MAY use multiple sample entries, and in that case the following values SHALL not change in the track:
    - profile
    - level
    - color_config()
- the 'colr' and 'pasp' boxes SHALL be present
- for HDR profiles, metadata of type METADATA_TYPE_HDR_CLL and METADATA_TYPE_HDR_MDCV should be present.

When encrypted, [=CMAF AV1 Tracks=] SHALL use the signaling defined in CMAF, which in turns relies on CENC, with the provisions given in the “Common Encryption” Section below.

The following brands are defined for [=CMAF AV1 Tracks=]:

<table>
<thead>
<tr>
<th>Profile</th><th>Level</th><th>color primaries</th><th>transfer characteristics</th><th>matrix coefficients</th><th>Max Frame Height</th><th>Max Frame Width</th><th>Max Frame Rate</th><th>CMAF File Brand</th>
</tr>
</thead>
<tbody>
<tr>
<td>Main</td><td>Level</td><td>color primaries</td><td>transfer characteristics</td><td>matrix coefficients</td><td>Max Frame Height</td><td>Max Frame Width</td><td>Max Frame Rate</td><td>CMAF File Brand</td>
</tr>
<tr>
<td>High</td><td>Level</td><td>color primaries</td><td>transfer characteristics</td><td>matrix coefficients</td><td>Max Frame Height</td><td>Max Frame Width</td><td>Max Frame Rate</td><td>CMAF File Brand</td>
</tr>
<tr>
<td>Professional</td><td>Level</td><td>color primaries</td><td>transfer characteristics</td><td>matrix coefficients</td><td>Max Frame Height</td><td>Max Frame Width</td><td>Max Frame Rate</td><td>CMAF File Brand</td>
</tr>
</tbody>
</table>

ISSUE: The content of table above needs to be discussed once the profiles and levels definition in the AV1 bitstream specification is finalized.

Common Encryption {#cenc}
=========================

This section specifies how [=AV1 bitstreams=] are encrypted, in particular how to partition [=AV1 samples=] into clear and encrypted subsamples. [=CMAF AV1 Tracks=] and non-segmented AV1 files SHALL use [[!CENC]]. Both 'cenc' and 'cbcs' scheme types are permitted.

Sample Encryption {#sample-encryption}
--------------------------------------

When encrypting OBUs, all OBU headers MUST be unencrypted. Additionally, Temporal Delimiter, Sequence Header, Metadata (except for those requiring protection), Frame Header OBUs MUST be unencrypted.

Tile Groups OBU shall be encrypted using subsample encryption, with bytesOfProtectedData spanning all complete 16-byte blocks in the Tile Group OBU data.This is illustrated in Figure #1 and Figure #2.

For the 'cenc' scheme type, the encrypted bytes of each OBU within the sample MUST be block-aligned so that the counter state can be computed for each OBU within the sample. Block alignment is achieved by adjusting the size of the unencrypted bytes that precede the encrypted bytes for that frame.

<figure>
	<img alt="Simplified subsample-based AV1 encryption" src="images/subsample-encryption-no-type.svg">
	<figcaption>Subsample-based AV1 encryption with clear OBU headers with OBU types omitted.</figcaption>
</figure>

<figure>
	<img alt="Subsample-based AV1 encryption" src="images/subsample-encryption-type.svg">
	<figcaption>Subsample-based AV1 encryption with clear OBU headers including OBU types.</figcaption>
</figure>

Codecs Parameter String {#codecsparam}
======================================

DASH and other applications require defined values for the 'Codecs' parameter specified in [[!RFC6381]] for ISO Media tracks. The codecs parameter string for the AOM AV1 codec is as follows:
```
<sample entry 4CC>.<profile>.<still>.<level>.<bitDepth>.<monochrome>.<chromaSubsampling>.
<colorPrimaries>.<transferCharacteristics>.<matrixCoefficients>.<videoFullRangeFlag>
```

All fields following the sample entry 4CC are expressed as double digit decimals, unless indicated otherwise. Leading or trailing zeros cannot be omitted.

The profile parameter value, represented by a single digit decimal, SHALL equal the value of seq_profile in the [=Sequence Header=].

The still parameter value, represented by a single digit decimal, SHALL equal the value of still_picture in the [=Sequence Header=].

The level parameter value SHALL equal the first level value in the [=Sequence Header=].

The bitDepth parameter value SHALL equal the value of BitDepth variable as defined in [[AV1]] derived from the [=Sequence Header=].

The monochrome parameter value, represented by a single digit decimal, SHALL equal the value of mono_chrome in the [=Sequence Header=].

The chromaSubsampling parameter value, represented by a three-digit decimal, SHALL have its first digit equal to subsampling_x and its second digit equal to subsampling_y and the third digit equal to chroma_sample_position, if the first two values are non-zero, or 0 otheriwise.

The colorPrimaries, transferCharacteristics, matrixCoefficients and videoFullRangeFlag parameter values SHALL equal the value of matching fields in the [=Sequence Header=], if color_description_present_flag is set to 1, otherwise they SHOULD not be set, defaulting to the values below. The videoFullRangeFlag is represented by a single digit.

For example, codecs="av01.0.0.04.10.0.112.09.16.09.0" represents AV1 profile 0, non still picture mode, level 4, 10-bit content, non-monochrome, with 4:2:0 chroma subsampling, ITU-R BT.2100 color primaries, ITU BT.2100 PQ transfer characteristics, ITU-R BT.2100 YCbCr color matrix, and studio swing representation.

The parameters sample entry 4CC, profile, level, and bitDepth are all mandatory fields. If any of these fields are empty, or not within their allowed range, the processing device SHOULD treat it as an error.

All the other fields (including their leading '.') are optional, mutually inclusive (all or none) fields. If not specified then the values listed in the table below are assumed.

<table class="def">
<tr>
<td>mono_chrome</td><td>0</td>
</tr>
<tr>
<td>chromaSubsampling</td><td>112 (4:2:0 colocated with luma (0,0))</td>
</tr>
<tr>
<td>colorPrimaries</td><td>1 (ITU-R BT.709)</td>
</tr>
<tr>
<td>transferCharacteristics</td><td>1 (ITU-R BT.709)</td>
</tr>
<tr>
<td>matrixCoefficients</td><td>1 (ITU-R BT.709)</td>
</tr>
<tr>
<td>videoFullRangeFlag</td><td>0 (studio swing representation)</td>
</tr>
</table>

The string codecs="av01.0.0.01.08" in this case would represent AV1 profile 0, non still picture mode, level 1, 8-bit content with 4:2:0 chroma subsampling, ITU-R BT.709 color primaries, transfer characteristics and matrix coefficients, and studio swing representation.

If any character that is not '.' or digits is encountered, the string SHALL be interpreted ignoring all the characters starting from that character.