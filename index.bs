<pre class='metadata'>
Title: AV1 Codec ISO Media File Format Binding
Status: LS
URL: https://AOMediaCodec.github.io/av1-isobmff
Shortname: av1-isobmff
Editor: Cyril Concolato, Netflix, cconcolato@netflix.com
Editor: Tom Finegan, Google, tom.finegan@google.com
Abstract: This document specifies the storage format for [[!AV1]] bitstreams in [[!ISOBMFF]] tracks as well as a set of [[!CMAF]] Media profiles based on [[!AV1]].
Date: 2018-07-23
Repository: AOMediaCodec/av1-isobmff
Inline Github Issues: full
Boilerplate: property-index no, issues-index no, copyright yes
Markup Shorthands: css on
Group: AOM
Warning: Custom
Custom Warning Title: Warning
Custom Warning Text: This specification is still at draft stage and should not be referenced other than as a working draft.
</pre>

<div boilerplate='copyright'>
<p>Copyright 2018, The Alliance for Open Media</p>
<p>Licensing information is available at http://aomedia.org/license/</p>
<p>The MATERIALS ARE PROVIDED “AS IS.” The Alliance for Open Media, its members, and its contributors expressly disclaim any warranties (express, implied, or otherwise), including implied warranties of merchantability, non-infringement, fitness for a particular purpose, or title, related to the materials. The entire risk as to implementing or otherwise using the materials is assumed by the implementer and user. IN NO EVENT WILL THE ALLIANCE FOR OPEN MEDIA, ITS MEMBERS, OR CONTRIBUTORS BE LIABLE TO ANY OTHER PARTY FOR LOST PROFITS OR ANY FORM OF INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES OF ANY CHARACTER FROM ANY CAUSES OF ACTION OF ANY KIND WITH RESPECT TO THIS DELIVERABLE OR ITS GOVERNING AGREEMENT, WHETHER BASED ON BREACH OF CONTRACT, TORT (INCLUDING NEGLIGENCE), OR OTHERWISE, AND WHETHER OR NOT THE OTHER MEMBER HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p>
</div>

<pre class="anchors">
url: http://iso.org/#; spec: ISOBMFF; type: dfn;
	text: VisualSampleEntry

url: http://iso.org/#; spec: ISOBMFF; type: property;
	text: bitr
	text: colr
	text: ctts
	text: nclx
	text: pasp
	text: sgpd
	text: stsd

url: http://iso.org/#; spec: RFC6381; type: property;
	text: codecs

url: https://aomediacodec.github.io/av1-spec/av1-spec.pdf#page=1; spec: AV1; type: dfn;
	text: AV1 bitstream

url: http://aomediacodec.github.io/av1-spec/av1-spec.pdf#page=39; spec: AV1; type: dfn;
	text: OBU

url: http://aomediacodec.github.io/av1-spec/av1-spec.pdf#page=40; spec: AV1; type: dfn;
	text: OBU Header

url: http://aomediacodec.github.io/av1-spec/av1-spec.pdf#page=49; spec: AV1; type: dfn;
	text: Frame Header OBU

url: http://aomediacodec.github.io/av1-spec/av1-spec.pdf#page=41; spec: AV1; type: dfn;
	text: Sequence Header OBU

url: http://aomediacodec.github.io/av1-spec/av1-spec.pdf#page=46; spec: AV1; type: dfn;
	text: Temporal Delimiter OBU

url: http://aomediacodec.github.io/av1-spec/av1-spec.pdf#page=72; spec: AV1; type: dfn;
	text: Tile Group OBU

url: http://aomediacodec.github.io/av1-spec/av1-spec.pdf#page=71; spec: AV1; type: dfn;
	text: Frame OBU

url: http://aomediacodec.github.io/av1-spec/av1-spec.pdf#page=121; spec: AV1; type: dfn;
	text: Tile List OBU

url: http://aomediacodec.github.io/av1-spec/av1-spec.pdf#page=47; spec: AV1; type: dfn;
	text: Metadata OBU

url: http://aomediacodec.github.io/av1-spec/av1-spec.pdf#page=206; spec: AV1; type: dfn;
	text: Random Access Point
	text: Delayed Random Access Point
	text: Key Frame Dependent Recovery Point

url: http://aomediacodec.github.io/av1-spec/av1-spec.pdf#page=13; spec: AV1; type: dfn
	text: Inter Frame
	text: Intra-only Frame
	text: Key Frame
	text: S Frame
	text: Temporal Unit

url: http://aomediacodec.github.io/av1-spec/av1-spec.pdf#page=39; spec: AV1; type: dfn
	text: Low Overhead Bitstream Format

url: http://iso.org/#; spec: CMAF; type: dfn;
	text: CMAF Video Track

url: http://iso.org/#; spec: CENC; type: dfn;
	text: BytesOfProtectedData
	text: cbcs
	text: cenc

url: http://aomediacodec.github.io/av1-spec/av1-spec.pdf#page=45; spec: AV1; type: dfn
	text: timing_info

url: http://aomediacodec.github.io/av1-spec/av1-spec.pdf#page=2; spec: AV1; type: dfn;
	text: max_frame_height_minus_1
	text: max_frame_width_minus_1
	text: obu_has_size_field
	text: obu_size
	text: open_bitstream_unit
	text: seq_level_idx
	text: seq_tier
	text: show_existing_frame
	text: show_frame
	text: timing_info_present_flag
	text: buffer_removal_time
	text: byte_alignment
	text: frame_presentation_time
	text: initial_display_delay_minus_1
</pre>

Bitstream features overview {#bitstream-overview}
=================================================
An [=AV1 bitstream=] is composed of a sequence of [=OBUs=], grouped into [=Temporal Units=].

OBUs are made of a 1 or 2 bytes header, identifying in particular the type of OBU, followed by an optional length field and by an optional payload whose presence and content depend on the OBU type. Depending on its type, an OBU can carry configuration information, metadata or coded video data.

Temporal Units are processed by a decoder in the order given by the bitstream. Each Temporal Unit is associated with a presentation time. Some Temporal Units may contain multiple frames to be decoded but only one is presented (when scalability is not used).

NOTE: The AV1 specification defines scalability features, but this version of storage in ISOBMFF does not specify specific tools for scalability. A future version of the specification may do so.

Frames carried in Temporal Units may have coding dependencies on frames carried previously in the same Temporal Unit or in previous Temporal Units. Frames that can be decoded without dependencies to previous frames are of two categories: [=Key Frames=] and [=Intra-only Frames=]. Frames that cannot be decoded independently are of three categories: [=Inter Frames=], [=S Frames=] and frames with a [=show_existing_frame=] flag set to 1.

Key Frames with the [=show_frame=] flag set to 1 have the additional property that after decoding the Key Frame, all frames can be decoded. They are called [=Random Access Points=] in [[!AV1]].

Key Frames with the [=show_frame=] flag set to 0 are called [=Delayed Random Access Points=]. [=Delayed Random Access Points=] have the additional property that if a future [=Key Frame Dependent Recovery Point=] exists, all frames following that [=Key Frame Dependent Recovery Point=] can be decoded. A [=Key Frame Dependent Recovery Point=] is a frame with [=show_existing_frame=] set to 1 which refers to a previous [=Delayed Random Access Points=].

Basic Encapsulation Scheme {#basic-encapsulation}
=================================================

This section describes the basic data structures used to signal encapsulation of [=AV1 bitstreams=] in [[!ISOBMFF]] containers.

General requirement {#general-requirement}
--------------------

A file conformant to this specification SHALL conform to the normative requirements of [[!ISOBMFF]].


Brand {#basic-brand}
--------------------

If the <dfn value export for="ISOBMFF Brand">av01</dfn> brand is present in the FileTypeBox, the file SHALL contain at least one track using an [=AV1SampleEntry=].

AV1 Sample Entry {#av1sampleentry-section}
----------------------------------

### Definition ### {#av1sampleentry-definition}

<pre class="def">
	Sample Entry Type: <dfn value export for="AV1SampleEntry">av01</dfn>
	Container:         Sample Description Box ('stsd')
	Mandatory:         Yes
	Quantity:          One or more.
</pre>

### Description ### {#av1sampleentry-description}

The <dfn>AV1SampleEntry</dfn> sample entry identifies that the track contains [=AV1 Samples=], and uses an [=AV1CodecConfigurationBox=].

### Syntax ### {#av1sampleentry-syntax}

```
class AV1SampleEntry extends VisualSampleEntry('av01') {
  AV1CodecConfigurationBox config;
}
```

### Semantics ### {#av1sampleentry-semantics}

The <dfn noexport>width</dfn> and <dfn noexport>height</dfn> fields of the [=VisualSampleEntry=] SHALL equal the values of [=max_frame_width_minus_1=] + 1 and [=max_frame_height_minus_1=] + 1 of the [=Sequence Header OBU=] applying to the samples associated with this sample entry.

As specified in [[!ISOBMFF]], the width and height in the [=VisualSampleEntry=] are specified in square pixels. If the video pixels are not square, then a 'pasp' box SHALL be included and the track header width and height SHOULD match the values of [=max_frame_width_minus_1=] + 1 and [=max_frame_height_minus_1=] + 1 after the 'pasp' ratio has been applied.

The <dfn noexport>compressorname</dfn> field of the [=VisualSampleEntry=] is an informative name. It is formatted in a fixed 32-byte field, with the first byte set to the number of bytes to be displayed, followed by that number of bytes of displayable data, followed by padding to complete 32 bytes total (including the size byte). The value "\012AOM Coding" is RECOMMENDED; the first byte is a count of the remaining bytes, here represented by \012, which (being octal 12) is decimal 10, the number of bytes in the rest of the string.

NOTE: Parsers may ignore the value of the compressorname field. It is specified in this document simply for legacy and backwards compatibility reasons.

The <dfn noexport>config</dfn> field SHALL contain an [=AV1CodecConfigurationBox=] that applies to the samples associated with this sample entry.

NOTE: Multiple instances of [=AV1SampleEntry=] may be required when the track contains samples requiring a [=AV1CodecConfigurationBox=] with different characteristics.

Optional boxes not specifically mentioned here can be present, in particular those indicated in the definition of the [=VisualSampleEntry=] in [[ISOBMFF]].

AV1 Codec Configuration Box {#av1codecconfigurationbox-section}
--------------------------------------------------------

### Definition ### {#av1codecconfigurationbox-definition}

<pre class="def">
	Box Type:  <dfn export>av1C</dfn>
	Container: AV1 Sample Entry ('av01')
	Mandatory: Yes
	Quantity:  Exactly One
</pre>


### Description ### {#av1codecconfigurationbox-description}

The <dfn>AV1CodecConfigurationBox</dfn> contains decoder configuration information that SHALL be valid for every sample that references the sample entry.


### Syntax ### {#av1codecconfigurationbox-syntax}

```
class AV1CodecConfigurationBox extends FullBox('av1C', version = 0, 0){
  AV1CodecConfigurationRecord av1Config;
}

aligned (8) class AV1CodecConfigurationRecord {
  unsigned int (3) reserved = 0;
  unsigned int (1) initial_presentation_delay_present;
  if (initial_presentation_delay_present) {
    unsigned int (4) initial_presentation_delay_minus_one;
  } else {
    unsigned int (4) reserved;
  }
  unsigned int (8)[] configOBUs;
}
```

### Semantics ### {#av1codecconfigurationbox-semantics}

The <dfn export>configOBUs</dfn> field contains one or more OBUs. The [=Sequence Header OBU=] MUST be present. Any other OBU MAY be present provided that the following procedures produce compliant AV1 bitstreams:
- From any sync sample, an AV1 bitstream is formed by first outputting the OBUs contained in the [=AV1CodecConfigurationBox=] and then by outputing all OBUs in the samples themselves, in order, starting from the sync sample.
- From any sample marked with the [=AV1ForwardKeyFrameSampleGroupEntry=], an AV1 bitstream is formed by first outputting the OBUs contained in the [=AV1CodecConfigurationBox=] and then by outputing all OBUs in the sample itself, then by outputting all OBUs in the samples, in order, starting from the sample at the distance indicated by the sample group.

NOTE: The configOBUs field is expected to contain only [=Sequence Header OBU=] and [=metadata OBU=]. The [=metadata OBU=] SHALL be present only when it is applicable to all the associated samples.

OBUs stored in the configOBUs field follow the [=open_bitstream_unit=] [=Low Overhead Bitstream Format=] syntax as specified in [[!AV1]]. The flag [=obu_has_size_field=] SHALL be set to 1, indicating that the size of the OBU payload follows the header, and that it is coded using LEB128.

The <dfn>initial_presentation_delay_present</dfn> field indicates the presence of the initial_presentation_delay_minus_one field.

The <dfn>initial_presentation_delay_minus_one</dfn> field indicates the number of samples (minus one) that need be decoded prior to starting the presentation of the first sample associated with this sample entry in order to guarantee that each sample will be decoded prior to its presentation time under the constraints of the first level value indicated by [=seq_level_idx=] in the [=Sequence Header OBU=] (in the configOBUs field or in the associated samples). More precisely, the following procedure SHALL not return any error:
- construct a hypothetical bitstream consisting of the OBUs carried in the sample entry followed by the OBUs carried in all the samples,
- set the first [=initial_display_delay_minus_1=] field of each [=Sequence Header OBU=] to the number of frames contained in the first [=initial_presentation_delay_minus_one=] + 1 samples,
- set the [=frame_presentation_time=] field of the frame header of each presentable frame such that it matches the presentation time difference between the sample carrying this frame and the previous sample (if it exists, 0 otherwise)
- apply the display model verification algorithm.

When smooth presentation can be guaranteed after decoding the first sample, the value 0 SHALL be used. If an ISOBMFF writer cannot verify the above procedure, [=initial_presentation_delay_present=] SHALL be set to 0.

The presentation times of AV1 samples are given by the ISOBMFF structures. The [=timing_info_present_flag=] in the [=Sequence Header OBU=] (in the configOBUs field or in the associated samples) SHOULD be set to 0. If set to 1, the [=timing_info=] structure of the [=Sequence Header OBU=], the [=frame_presentation_time=] and [=buffer_removal_time=] fields of the [=Frame Header OBUs=], if present, SHALL be ignored for the purpose of timed processing of the ISOBMFF file.

If a 'colr' box is present in the [=VisualSampleEntry=] with a colour_type set to 'nclx', the values of colour_primaries, transfer_characteristics, and matrix_coefficients SHALL match the values given in the [=Sequence Header OBU=] (in the configOBUs field or in the associated samples) if the color_description_present_flag is set to 1. Similarly, the full_range_flag in the 'colr' box shall match the color_range flag in the [=Sequence Header OBU=].

Additional boxes may be provided at the end of the [=VisualSampleEntry=] as permitted by ISOBMFF, that may represent redundant or similar information to the one provided in some OBUs contained in the [=AV1CodecConfigurationBox=]. If the box definition does not indicate that its information overrides the OBU information, in case of conflict, the OBU information should be considered authoritative.

AV1 Sample Format {#sampleformat}
---------------------------------

For tracks using the [=AV1SampleEntry=], an <dfn>AV1 Sample</dfn> has the following constraints:
- the sample data SHALL be a sequence of [=OBUs=] forming a [=Temporal Unit=],
- each OBU SHALL follow the [=open_bitstream_unit=] [=Low Overhead Bitstream Format=] syntax as specified in [[!AV1]]. Each OBU SHALL have the [=obu_has_size_field=] set to 1 except for the last OBU in the sample, for which [=obu_has_size_field=] MAY be set to 0, in which case it is assumed to fill the remaining of the sample,

NOTE: When extracting OBUs from an ISOBMFF file, and depending on the capabilities of the decoder processing these OBUs, ISOBMFF parsers MAY need to either set the [=obu_has_size_field=] to 1 for some OBUs if not already set and add the length field, or use the length-delimited bitstream format as defined in Annex B of [=AV1=].
- OBU trailing bits SHOULD be limited to byte alignment and SHOULD not be used for padding,
- OBUs of type OBU_TD, OBU_PADDING or OBU_REDUNDANT_FRAME_HEADER SHOULD NOT be used.

If an AV1 Sample is signaled as a sync sample (in the SyncSampleBox or by setting sample_is_non_sync_sample to 0), it SHALL be a Random Access Point as defined in [[!AV1]], i.e. satisfy the following constraints:
- Its first frame is a [=Key Frame=] that has [=show_frame=] flag set to 1,
- It contains a [=Sequence Header OBU=] before the first [=Frame Header OBU=].

NOTE: Within this definition, a sync sample may contain additional frames that are not Key Frames. The fact that none of them is the first frame in the temporal unit ensures that they are decodable.

NOTE: Other types of OBUs such as [=metadata OBUs=] could be present before the [=Sequence Header OBU=].

[=Intra-only frames=] SHOULD be signaled using the sample_depends_on flag set to 2.

[=Delayed Random Access Points=] SHOULD be signaled using sample groups and the [=AV1ForwardKeyFrameSampleGroupEntry=].

[=S Frames=] SHOULD be signaled using sample groups and the [=AV1SFrameSampleGroupEntry=].

Additionally, if a file contains multiple tracks which are alternative representations of the same content, in particular using [=S Frames=], those tracks SHOULD be marked as belonging to the same alternate group and should use a track selection box with an appropriate attribute (e.g. 'bitr').

Unlike many video standards, AV1 does not distinguish the display order from the decoding order, but achieves similar effects by grouping multiple frames within a sample. Therefore, composition offsets are not used. In tracks using the [=AV1SampleEntry=], the 'ctts' box and composition offsets in movie fragments SHALL NOT be used. Similarly, the is_leading flag, if used, SHALL be set to 0 or 2.

When a temporal unit contains more than one frame, the sample corresponding to that temporal unit MAY be marked using the [=AV1MultiFrameSampleGroupEntry=].

[=Metadata OBUs=] may be carried in sample data. In this case, the [=AV1MetadataSampleGroupEntry=] SHOULD be used. If the [=metadata OBUs=] are static for the entire set of samples associated with a given sample description entry, they SHOULD also be in the OBU array in the sample description entry.

Unless explicitely stated, the grouping_type_parameter is not defined for the SampleToGroupBox with grouping types defined in this specification.

AV1 Forward Key Frame sample group entry {#forwardkeyframesamplegroupentry}
----------------------------------------------------------------

### Definition ### {#forwardkeyframesamplegroupentry-definition}

<pre class="def">
	Group Type: <dfn export>av1f</dfn>
	Container:  Sample Group Description Box ('sgpd')
	Mandatory:  No
	Quantity:   Zero or more.
</pre>

### Description ### {#forwardkeyframesamplegroupentry-description}

The <dfn>AV1ForwardKeyFrameSampleGroupEntry</dfn> documents samples that contain a [=Delayed Random Access Point=] that are followed at a given distance in the bitstream by a [=Key Frame Dependent Recovery Point=].


### Syntax ### {#forwardkeyframesamplegroupentry-syntax}

```
class AV1ForwardKeyFrameSampleGroupEntry extends VisualSampleGroupEntry('av1f') {
  unsigned int(8) fwd_distance;
}
```

### Semantics ### {#forwardkeyframesamplegroupentry-semantics}

The <dfn export>fwd_distance</dfn> field indicates the number of samples between this sample and the next sample containing the associated [=Key Frame Dependent Recovery Point=]. 0 means the next sample.

AV1 Multi-Frame sample group entry {#multiframesamplegroupentry}
----------------------------------------------------------------

### Definition ### {#multiframesamplegroupentry-definition}

<pre class="def">
	Group Type: <dfn value export for="AV1MultiFrameSampleGroupEntry">av1m</dfn>
	Container:  Sample Group Description Box ('sgpd')
	Mandatory:  No
	Quantity:   Zero or more.
</pre>


### Description ### {#multiframesamplegroupentry-description}

The <dfn>AV1MultiFrameSampleGroupEntry</dfn> documents samples that contain multiple frames.


### Syntax ### {#multiframesamplegroupentry-syntax}

```
class AV1MultiFrameSampleGroupEntry extends VisualSampleGroupEntry('av1m') {
}
```

AV1 S-Frame sample group entry {#sframeamplegroupentry}
-------------------------------------------------------

### Definition ### {#sframeamplegroupentry-definition}

<pre class="def">
	Group Type: <dfn export>av1s</dfn>
	Container:  Sample Group Description Box ('sgpd')
	Mandatory:  No
	Quantity:   Zero or more.
</pre>


### Description ### {#sframeamplegroupentry-description}

The <dfn>AV1SFrameSampleGroupEntry</dfn> documents samples that start with an [=S Frame=].

### Syntax ### {#sframeamplegroupentry-syntax}

```
class AV1SFrameSampleGroupEntry extends VisualSampleGroupEntry('av1s') {
}
```

AV1 Metadata sample group entry {#metadatasamplegroupentry}
-----------------------------------------------------------

### Definition ### {#metadatasamplegroupentry-definition}

<pre class="def">
	Group Type: <dfn value noexport for="AV1MetadataSampleGroupEntry">av1M</dfn>
	Container:  Sample Group Description Box ('sgpd')
	Mandatory:  No
	Quantity:   Zero or more.
</pre>


### Description ### {#metadatasamplegroupentry-description}

The <dfn>AV1MetadataSampleGroupEntry</dfn> documents samples that contain [=metadata OBUs=] of the given type.

### Syntax ### {#metadatasamplegroupentry-syntax}

```
class AV1MetadataSampleGroupEntry extends VisualSampleGroupEntry('av1M') {
  unsigned int (16) metadata_type;
}
```

### Semantics ### {#metadatasamplegroupentry-semantics}

<dfn export>metadata_type</dfn> used by one OBU in the sample.

CMAF AV1 track format and CMAF media profiles {#cmaf}
=====================================================

[[CMAF]] defines structural constraints on ISOBMFF files additional to [[ISOBMFF]] for the purpose of, for example, adaptive streaming or for encrypted files. [[CMAF]] also relies on the signaling of CMAF Media Profiles. This document specifies CMAF Media Profiles and associated brands for AV1 bitstreams in CMAF-compliant files.

If a [=CMAF Video Track=] signals one of the brands defined below, it is called a <dfn>CMAF AV1 Track</dfn> and the following constraints apply:
- it SHALL use an [=AV1SampleEntry=]
- it MAY use multiple sample entries, and in that case the following values SHALL not change in the track:
    - profile
    - level
    - color_config()
- the 'colr' and 'pasp' boxes SHALL be present
- for HDR profiles, [=metadata OBUs=] of type METADATA_TYPE_HDR_CLL and METADATA_TYPE_HDR_MDCV should be present.

When encrypted, [=CMAF AV1 Tracks=] SHALL use the signaling defined in [[CMAF]], which in turns relies on [[CENC]], with the provisions specified in [[#CommonEncryption]].

The following brands are defined for [=CMAF AV1 Tracks=]:

<table border="1">
<thead>
<tr>
<th>Profile</th><th>Level</th><th>color primaries</th><th>transfer characteristics</th><th>matrix coefficients</th><th>Max Frame Height</th><th>Max Frame Width</th><th>Max Frame Rate</th><th>CMAF File Brand</th>
</tr>
</thead>
<tbody>
<tr>
<td>Main</td><td>Level</td><td>color primaries</td><td>transfer characteristics</td><td>matrix coefficients</td><td>Max Frame Height</td><td>Max Frame Width</td><td>Max Frame Rate</td><td>CMAF File Brand</td>
</tr>
<tr>
<td>High</td><td>Level</td><td>color primaries</td><td>transfer characteristics</td><td>matrix coefficients</td><td>Max Frame Height</td><td>Max Frame Width</td><td>Max Frame Rate</td><td>CMAF File Brand</td>
</tr>
<tr>
<td>Professional</td><td>Level</td><td>color primaries</td><td>transfer characteristics</td><td>matrix coefficients</td><td>Max Frame Height</td><td>Max Frame Width</td><td>Max Frame Rate</td><td>CMAF File Brand</td>
</tr>
</tbody>
</table>

ISSUE: The content of table above needs to be discussed once the profiles and levels definition in the AV1 bitstream specification is finalized.

Common Encryption {#CommonEncryption}
=========================

[=CMAF AV1 Tracks=] and non-segmented AV1 files MAY be encrypted. If encrypted, they SHALL conform to [[!CENC]]. In particular, both <code>[=cenc=]</code> and <code>[=cbcs=]</code> scheme types are permitted.

Sample Encryption {#sample-encryption}
--------------------------------------

When encrypting [=OBUs=], all [=OBU Headers=] and associated [=obu_size=] fields SHALL be unencrypted. Additionally, [=Temporal Delimiter OBUs=], [=Sequence Header OBUs=], [=Metadata OBUs=] (except for those requiring protection), [=Frame Header OBUs=] SHALL be unencrypted.

Within encrypted samples, all [=OBU Headers=] and associated [=obu_size=] fields SHALL be unencrypted. Additionally, [=Temporal Delimiter OBUs=], [=Sequence Header OBUs=], [=Metadata OBUs=] (except for those requiring protection), [=Frame Header OBUs=] (including with a [=Frame OBU=]) SHALL be unencrypted. [=Tile Group OBUs=], [=Frame OBUs=] (except the [=Frame Header OBU=] part) and [=Tile List OBUs=] MAY be encrypted. This is illustrated in Figure #1 and Figure #2, where for simplicity the [=obu_size=] field is assumed to be part of the [=OBU Header=].

As permitted by [[!CENC]], multiple unencrypted OBUs MAY be described by a single subsample. Also, mutiple subsamples MAY be used to describe the data of a single OBU.

When an OBU is encrypted, [=BytesOfProtectedData=] SHALL span all complete 16-byte blocks in the OBU data that is permitted to be encrypted.

For AES-CTR based scheme types, such as <code>[=cenc=]</code>, the encrypted bytes of each OBU within the sample SHALL be block-aligned so that the counter state can be computed for each OBU within the sample. Block alignment is achieved by adjusting the size of the unencrypted bytes that precede the encrypted bytes for that OBU. In other words, partial blocks are not permitted.

For AES-CBC based scheme types, such as  <code>[=cbcs=]</code>, [=BytesOfProtectedData=] SHALL start on the first complete byte of OBU data that is permitted to be encrypted (i.e. after the [=OBU Header=], [=obu_size=], possible [=Frame Header OBU=] and [=byte_alignment=]), and end on the end of the last complete 16-byte block of data in the OBU. Partial blocks at the end of OBUs, if any, SHALL be left unencrypted as specified in [[!CENC]].

<figure>
	<img alt="Simplified subsample-based AV1 encryption" src="images/subsample-encryption-no-type.svg">
	<figcaption>Subsample-based AV1 encryption with clear OBU headers with OBU types omitted.</figcaption>
</figure>

<figure>
	<img alt="Subsample-based AV1 encryption" src="images/subsample-encryption-type.svg">
	<figcaption>Subsample-based AV1 encryption with clear OBU headers including OBU types.</figcaption>
</figure>

Codecs Parameter String {#codecsparam}
======================================

DASH and other applications require defined values for the 'Codecs' parameter specified in [[!RFC6381]] for ISO Media tracks. The codecs parameter string for the AOM AV1 codec is as follows:
```
<sample entry 4CC>.<profile>.<level><tier>.<bitDepth>.<monochrome>.<chromaSubsampling>.
<colorPrimaries>.<transferCharacteristics>.<matrixCoefficients>.<videoFullRangeFlag>
```

All fields following the sample entry 4CC are expressed as double digit decimals, unless indicated otherwise. Leading or trailing zeros cannot be omitted.

The profile parameter value, represented by a single digit decimal, SHALL equal the value of seq_profile in the [=Sequence Header OBU=].

The level parameter value SHALL equal the first level value indicated by [=seq_level_idx=] in the [=Sequence Header OBU=].

The tier parameter value SHALL be equal to <code>M</code> when the first [=seq_tier=] value in the [=Sequence Header OBU=] is equal to 0, and <code>H</code> when it is equal to 1.

The bitDepth parameter value SHALL equal the value of BitDepth variable as defined in [[AV1]] derived from the [=Sequence Header OBU=].

The monochrome parameter value, represented by a single digit decimal, SHALL equal the value of mono_chrome in the [=Sequence Header OBU=].

The chromaSubsampling parameter value, represented by a three-digit decimal, SHALL have its first digit equal to subsampling_x and its second digit equal to subsampling_y. If both subsampling_x and subsampling_y are set to 1, then the third digit SHALL be equal to chroma_sample_position, otherwise it SHALL be set to 0.

The colorPrimaries, transferCharacteristics, matrixCoefficients and videoFullRangeFlag parameter values SHALL equal the value of matching fields in the [=Sequence Header OBU=], if color_description_present_flag is set to 1, otherwise they SHOULD not be set, defaulting to the values below. The videoFullRangeFlag is represented by a single digit.

For example, codecs="av01.0.04M.10.0.112.09.16.09.0" represents AV1 profile 0, level 3.0, Main tier, 10-bit content, non-monochrome, with 4:2:0 chroma subsampling, ITU-R BT.2100 color primaries, ITU BT.2100 PQ transfer characteristics, ITU-R BT.2100 YCbCr color matrix, and studio swing representation.

The parameters sample entry 4CC, profile, level, tier, and bitDepth are all mandatory fields. If any of these fields are empty, or not within their allowed range, the processing device SHOULD treat it as an error.

All the other fields (including their leading '.') are optional, mutually inclusive (all or none) fields. If not specified then the values listed in the table below are assumed.

<table class="def">
<tr>
<td>mono_chrome</td><td>0</td>
</tr>
<tr>
<td>chromaSubsampling</td><td>112 (4:2:0 colocated with luma (0,0))</td>
</tr>
<tr>
<td>colorPrimaries</td><td>1 (ITU-R BT.709)</td>
</tr>
<tr>
<td>transferCharacteristics</td><td>1 (ITU-R BT.709)</td>
</tr>
<tr>
<td>matrixCoefficients</td><td>1 (ITU-R BT.709)</td>
</tr>
<tr>
<td>videoFullRangeFlag</td><td>0 (studio swing representation)</td>
</tr>
</table>

The string codecs="av01.0.01M.08" in this case would represent AV1 profile 0, level 2.1, Main tier, 8-bit content with 4:2:0 chroma subsampling, ITU-R BT.709 color primaries, transfer characteristics and matrix coefficients, and studio swing representation.

If any character that is not '.', digits, part of the AV1 4CC, or a tier value is encountered, the string SHALL be interpreted ignoring all the characters starting from that character.
